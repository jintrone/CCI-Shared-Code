// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.mit.cci.simulation.excel.server;

import edu.mit.cci.simulation.excel.server.ExcelSimulation;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect ExcelSimulationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ExcelSimulationDataOnDemand: @Component;
    
    private Random ExcelSimulationDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<ExcelSimulation> ExcelSimulationDataOnDemand.data;
    
    public ExcelSimulation ExcelSimulationDataOnDemand.getNewTransientExcelSimulation(int index) {
        edu.mit.cci.simulation.excel.server.ExcelSimulation obj = new edu.mit.cci.simulation.excel.server.ExcelSimulation();
        obj.setCreation(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setSimulation(null);
        obj.setFile(null);
        return obj;
    }
    
    public ExcelSimulation ExcelSimulationDataOnDemand.getSpecificExcelSimulation(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ExcelSimulation obj = data.get(index);
        return ExcelSimulation.findExcelSimulation(obj.getId());
    }
    
    public ExcelSimulation ExcelSimulationDataOnDemand.getRandomExcelSimulation() {
        init();
        ExcelSimulation obj = data.get(rnd.nextInt(data.size()));
        return ExcelSimulation.findExcelSimulation(obj.getId());
    }
    
    public boolean ExcelSimulationDataOnDemand.modifyExcelSimulation(ExcelSimulation obj) {
        return false;
    }
    
    public void ExcelSimulationDataOnDemand.init() {
        data = edu.mit.cci.simulation.excel.server.ExcelSimulation.findExcelSimulationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ExcelSimulation' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<edu.mit.cci.simulation.excel.server.ExcelSimulation>();
        for (int i = 0; i < 10; i++) {
            edu.mit.cci.simulation.excel.server.ExcelSimulation obj = getNewTransientExcelSimulation(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
