<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:fn="http://java.sun.com/jsp/jstl/functions"  xmlns:spring="http://www.springframework.org/tags" xmlns:page="urn:jsptagdir:/WEB-INF/tags/form" xmlns:table="urn:jsptagdir:/WEB-INF/tags/form/fields" version="2.0">
    <jsp:directive.page contentType="text/html;charset=UTF-8"/>
    <jsp:output omit-xml-declaration="yes"/>

	<spring:url var="mappingIcon" value="/resources/images/mapping_small.png" />
	<spring:url var="stepIcon" value="/resources/images/step_small.png" />
	<spring:url var="simulationIcon" value="/resources/images/simulation_small.png" />

	
	<script type="text/javascript">
		var idGenerator = 10000;
		
		var simulationsList = eval('(${simulationsJson})');
		var simulationInputs = eval('(${simulationInputs})');
		var simulationOutputs = eval('(${simulationOutputs})');
		var simulationsById = {};

		for (var i = 0; i &lt; simulationsList.length; i++) {
			simulationsById[simulationsList[i].id] = simulationsList[i];
			idGenerator ++;
		}
		
		var variablesList = eval('(${variablesJson})');
		var variablesById = {};
		for (var i = 0; i &lt; variablesList.length; i++) {
			variablesById[variablesList[i].id] = variablesList[i];
			idGenerator ++;
		}
		
		

		function generateItemId(itemType) {
			var num = idGenerator++;
			return {str: "compSim_" + itemType + "_" + num, num: num} 
		}
		
		function generateElement(name, attributes, body, selfEnd) {
			var attributesStr = []
			for (var x in attributes) {
				attributesStr.push(" " + x + "='" + attributes[x] + "' ");
			}
			
			attributesStr = attributesStr.join("");
			if (selfEnd) {
				return "&lt;" + name + " " + attributesStr + " /&gt;";
			}
			
			return "&lt;" + name + " " + attributesStr + " &gt;" + body + "&lt;/" + name + "&gt;";
		}		
		
		function generateRemoveButton() {
			return generateElement("button", {class: "removeButton", onclick: "removeItem(this)"}, "remove");
		}
				
		
		function generateSimulationSelectBox() {
			var options = [];
			options.push(generateElement('option', {value: "-1"}, "-- choose simulation --"));
			for (var i = 0; i &lt; simulationsList.length; i++) {
				options.push(generateElement("option", {value: simulationsList[i].id}, simulationsList[i].name));
			} 
			
			return generateElement("select", {}, options.join(""));
		}
		
		function generateVariablesSelectBox(properties) {
			var options = [];
			options.push(generateElement('option', {value: "-1"}, "-- choose variable --"));
			for (var i = 0; i &lt; variablesList.length; i++) {
				options.push(generateElement("option", {value: variablesList[i].id}, variablesList[i].name));
			} 
			
			return generateElement("select", properties, options.join(""));
		}
	
		function addStep() {
			var itemId = generateItemId("step")

			var addSimulationButton = generateElement("button", {onclick: "addSimulation(\"" + itemId.str + "\")"}, "Add simulation");
			var embeddedSimulations = generateElement("ul", {id: itemId.str + "_embeddedSim"}, "");
			var selectBox = generateSimulationSelectBox();
			var stepName = generateElement("span", {}, "Step " + itemId.num);
			
			var liTag = generateElement("li", {id: itemId.str, class: "compSim_step", rel: itemId.num}, stepName + 
					generateRemoveButton() + embeddedSimulations + "Add simulation: " + selectBox + addSimulationButton);

			var html = [];
			
			html.push(liTag);
			
			
			
			$("#compositeSimulationSteps").append(html.join(""));
			
			updateAllStepSelect();
		}

		function addSimulation(stepId) {
			var simulationId = $("#" + stepId + " option:selected").val();
			if (simulationId in simulationsById) {
				var sim = simulationsById[simulationId];
				var li = generateElement("li", {class: "compSim_simulation", rel: simulationId}, sim.name + generateRemoveButton());
				$("#" + stepId + " ul").append(li);	
				var simulationId = $("#" + stepId + " option").eq(0).attr('selected', 'selected');
			}	
		}
		
		function generateStepsSelectBox(properties) {
			
			var options = [];
			options.push(generateElement('option', {value: null}, "-- pick a step --"));
			
			$("#compositeSimulationSteps>li").each(function() {
				options.push(generateElement("option", {value: $(this).attr('rel')}, $(this).find("span").text()));
			});
			
			var classProperty = ' stepsSelect ';
			if ('class' in properties) {
				classProperty += properties.class;
			}
			properties.class = classProperty;

			return generateElement("select", properties, options.join(""));
		}
		
		function addMapping() {
			var itemId = generateItemId("mapping");
			var html = [];

			var addVariableMapping = generateElement("button", {onclick: "addVariableMapping(\"" + itemId.str + "\")"}, "Add variable mapping");
			
			var varFrom = generateVariablesSelectBox({class: "variable_from"}); //generateElement("input", {name: "nameFrom", class: "nameFromInput"}, "");
			var varTo = generateVariablesSelectBox({class: "variable_to"}); //generateElement("input", {name: "nameTo", class: "nameToInput"}, "");
			
			var stepFrom = generateStepsSelectBox({class: "step_from", onchange:"changeStep(\"from\", \"" + itemId.str + "\")"});
			var stepTo = generateStepsSelectBox({class: "step_to", onchange:"changeStep(\"to\", \"" + itemId.str + "\")"});
			
			
			var embeddedItems = generateElement("ul", {id: itemId.str + "_embeddedItems", rel: itemId.str}, "");
			var li = generateElement("li", {id: itemId.str, class: 'compSim_mapping', rel: itemId.num}, "From step: " + 
					stepFrom + "To step: " + stepTo + generateRemoveButton() + embeddedItems + "&lt;br /&gt;Name from: " + varFrom + " Name to: " + varTo + " " + addVariableMapping);
			
			$("#compositeSimulationMappings").append(li);
			updateStepVariables('from', itemId.str);
			updateStepVariables('to', itemId.str);
			
		}
		
		function addVariableMapping(itemId) {
			var varFromId = $("#" + itemId + " .variable_from option:selected").val();
			var varToId = $("#" + itemId + " .variable_to option:selected").val();
			var variablesUsed = $("#" + itemId + " .variable_from" + varFromId).length > 0 || $("#" + itemId + " ul .variable_from" + varToId).length > 0 ||
				$("#" + itemId + " .variable_to" + varFromId).length > 0 || $("#" + itemId + " .variable_to" + varToId).length > 0;
			
			
			if (varToId != varFromId &amp;&amp; varToId in variablesById &amp;&amp; varFromId in variablesById &amp;&amp; ! variablesUsed) {
				
				var nameFromSpan = generateElement("span", {class: 'variable_from variable_from' + varFromId, rel: varFromId}, variablesById[varFromId].name); 
				var nameToSpan = generateElement("span", {class: 'variable_to variable_to' + varToId, rel: varToId}, variablesById[varToId].name);
				
				var li = generateElement("li", {}, nameFromSpan + " &gt; " + nameToSpan + generateRemoveButton());
			
				$("#" + itemId + " ul").append(li);
				
				$("#" + itemId + " .nameFromInput").val('');
				$("#" + itemId + " .nameToInput").val('');
			}
		}
		
		function addVariable(type) {
			var varId = $("#" + type + "VariableSelect option:selected").val();
			if (varId in variablesById &amp;&amp; $("#" + type + "Variable_" + varId).length == 0) {	
				var li = generateElement('li', {id: type + 'Variable_' + varId, rel: varId}, variablesById[varId].name + generateRemoveButton());	
						
				$("#compositeSimulation_" + type).append(li); 
				$("#" + type + "VariableSelect option").eq(0).attr('selected', 'selected')
			}
		}
		
		function createCompositeSimulation() {
			var compSim = {};
			
			compSim.name = $("#compSim_name").val();
			compSim.description = $("#compSim_description").val();
			compSim.id = parseInt($("#compSim_id").val());
			
			compSim.inputs = [];
			$("#compositeSimulation_input li").each(function() {
				compSim.inputs.push(parseInt(this.getAttribute("rel")));
			});
			

			compSim.outputs = [];
			$("#compositeSimulation_output li").each(function() {
				compSim.outputs.push(parseInt(this.getAttribute("rel")));
			});
			
			compSim.steps = [];
			$("#compositeSimulationSteps>li").each(function() {
				var item = {};
				item.simulations = [];
				
				$(this).find("li").each(function() {
					item.simulations.push(parseInt(this.getAttribute('rel')));
				});
				
				item.virtId = parseInt($(this).attr('rel'));
				item.id = parseInt($(this).attr('title'));
				
				compSim.steps.push(item);
			});
			
			compSim.mappings = [];
			$("#compositeSimulationMappings>li").each(function() {
				var item = {};
				item.mapping = {};
				$(this).find("li").each(function() {
					var from = parseInt($(this).find('.variable_from').attr('rel'));
					var to = parseInt($(this).find('.variable_to').attr('rel'));
					item.mapping[from] = to;
				});
				
				item.virtId = parseInt($(this).attr('rel'));
				item.id = parseInt($(this).attr('title'));
				item.fromStep = parseInt($(this).find('.step_from :selected').val());
				item.toStep = parseInt($(this).find('.step_to :selected').val());
				
				
				
				
				compSim.mappings.push(item);
			});
			
			//alert(JSON.stringify(compSim));
			
			$.ajax({
				data: {compositeSimulation: JSON.stringify(compSim)}, 
				success: function() { alert('success'); }, 
				error: function(x, y, z) { alert(x.responseText); }, 
				type: 'POST' });
			
		}
		
		function makeStepsSortable() {
			$("#compositeSimulationSteps").sortable('destroy');
			$("#compositeSimulationSteps").sortable();
			
		}
		
		function removeItem(item) {
			$(item.parentNode).remove();
		}
		
		function changeStep(type, id) {
			$('#' + id + " ul li").remove();
			updateStepVariables(type, id);
		}
		
		function updateAllStepVariables() {
			$('.compSim_mapping').each(function() {
				var id = this.getAttribute('id');
				updateStepVariable('from', id);
				updateStepVariable('from', id);
				
			});
		}
		
		function updateAllStepSelect() {
			var options = [];
			
			var steps = [];
			var stepsById = {};
			$('.compSim_step').each(function() {
				var id = this.getAttribute('rel');
				var step = {id: id, name: $(this).find("span").text()};
				steps.push(step);
				stepsById[step.id] = step;
			});
			
			$(".stepsSelect").each(function() {
				var varsFound = {};
				$(this).find("option").each(function() {
					var id = $(this).val();
					
					if (! id in stepsById) {
						// remove option if it was selected then change value 
						$(this).remove();
					}
					else {
						varsFound[id] = id;
					}
				});
				
				for (var varId in stepsById) {
					if (! (varId in varsFound)) {
						var option = generateElement("option", {value: varId}, stepsById[varId].name);
						$(this).append(option);
					}
				}
				
			});
			
		}
		
		function updateStepVariables(type, id) {
			var variables = [];
			var selectedStepId = parseInt($("#" + id + " .step_" + type + " option:selected").val());
			var variablesFrom = {};
			var variablesTo = {};
			
			if (selectedStepId &gt; 0) {
				$('#compSim_step_' + selectedStepId + " ul li").each(function() {
					var sim = simulationsById[this.getAttribute('rel')];

					if (type == 'from') {
						for (var i = 0; i &lt; simulationOutputs[sim.id].length; i++) {
							var varId = simulationOutputs[sim.id][i];
							variablesFrom[varId] = variablesById[varId];
						}
					}
					if (type == 'to') {
						for (var i = 0; i &lt; simulationInputs[sim.id].length; i++) {
							var varId = simulationInputs[sim.id][i];
							variablesTo[varId] = variablesById[varId];
						}
					}
				});
			}
			else {
				$("#compositeSimulation_input li").each(function() {
					var varId = this.getAttribute('rel');
					variablesFrom[varId] = variablesById[varId];
				});

				$("#compositeSimulation_output li").each(function() {
					var varId = this.getAttribute('rel');
					variablesTo[varId] = variablesById[varId];
				});
			}
			var options = [];
			options.push(generateElement('option', {value: "-1"}, "-- choose variable --"));
			for (var varId in variablesFrom) {
				options.push(generateElement("option", {value: varId}, variablesById[varId].name));
			}
				
			var optionsFrom = options;
			options = [];
			options.push(generateElement('option', {value: "-1"}, "-- choose variable --"));
			for (var varId in variablesTo) {
				options.push(generateElement("option", {value: varId}, variablesById[varId].name));
			}
			var optionsTo = options;
			
			if (type == 'from') {
				//alert(optionsFrom.join(""));
				//alert(id + "\n" + $("#" + id + " .variable_from").length + "\t" + $("#" + id).length);
				$("#" + id + " .variable_from").html(optionsFrom.join(""));
			}
			else {
				$("#" + id + " .variable_to").html(optionsTo.join(""));
			}
			
		}
		
		$(function() {
			makeStepsSortable();
		});
		
	</script>
	<table>
		<tr>
			<td><label for="compSim_name">Name:</label></td>
			<td><input id="compSim_name" type="text" value="${simulation.name}"/></td>
		</tr>
		<tr>
			<td><label for="compSim_description">Description:</label></td>
			<td><textarea id="compSim_description"><!--  -->${simulation.description}</textarea></td>
		</tr>
		<tr>
			<td><label for="compSim_inputs">Inputs:</label></td>
			<td>
				<ul id="compositeSimulation_input">
					<!--  -->
					<c:forEach var="input" items="${simulation.inputs}">
						<li id="inputVariable_${input.id}" rel="${input.id}">
							${input.name}  
							<button class="removeButton" onclick="removeItem(this)">remove</button>
						</li>
					</c:forEach>
				</ul>
				<select id="inputVariableSelect">
					<option value="-1">-- Choose variable -- </option>
					<c:forEach items="${variables}" var="variable"> 
						<option value="${variable.id}">${variable.name}</option>
					</c:forEach>
				</select>
				<button onclick="addVariable('input')">Add variable</button>
			</td>
		</tr>
		<tr>
			<td>
				<label for="compSim_outputs">Outputs:</label>
			</td>
			<td>
				<ul id="compositeSimulation_output">
					<!--  -->
					<c:forEach var="output" items="${simulation.outputs}">
						<li id="outputVariable_${output.id}" rel="${output.id}">${output.name} <button class="removeButton" onclick="removeItem(this)">remove</button></li>
					</c:forEach>
				</ul>
	
				<select id="outputVariableSelect">
					<option value="-1">-- Choose variable -- </option>
					<c:forEach items="${variables}" var="variable"> 
						<option value="${variable.id}">${variable.name}</option>
					</c:forEach>
				</select>
				<button onclick="addVariable('output')">Add variable</button>
			</td>
		</tr>
		<tr>
			<td>
				<label for="compSim_steps">Steps:</label>
			</td>
			<td>
				<ul id="compositeSimulationSteps"><!--  -->
					<c:forEach var="step" items="${simulation.steps}" varStatus="status">
						<li id="compSim_step_${step.id}" class="compSim_step" rel="${step.id}">
							<span>Step ${status.index + 1}</span>
			 				<button class="removeButton" onclick="removeItem(this)">remove</button>
							<ul>
								<c:forEach var="sim" items="${step.simulations}">
									<li class="compSim_simulation" rel="${sim.id}">${sim.name}
							 			<button class="removeButton" onclick="removeItem(this)">remove</button>
									</li>
								</c:forEach>
							</ul>
							<select class="simSelect">
								<c:forEach var="sim" items="${simulations}">
									<option value="${sim.id}">${sim.name}</option>
								</c:forEach>
							</select>
							<button onclick="addSimulation('compSim_step_${step.id}')">Add simulation</button>
						</li>
					</c:forEach>
				</ul>
				<button onclick="addStep()">Add step</button>
			</td>
		</tr>
		<tr>
			<td><label for="compSim_inputs">Mappings:</label></td>
			<td>
				<ul id="compositeSimulationMappings"><!--  -->		
					<c:forEach items="${simulation.stepMapping}" var="mapping"> 
						<li id="compSim_mapping${mapping.id}">
							From step: 
							<select class=" stepsSelect step_from" onchange="changeStep('from', 'compSim_mapping${mapping.id}')">
								<option value="-1">-- choose step --</option>
								<c:forEach var="step" items="${simulation.steps}">
									<c:if test="${mapping.fromStep.id == step.id}">
										<option value="${step.id}" selected="selected" >Step ${step.id}</option>
									</c:if>
									<c:if test="${mapping.fromStep.id != step.id}">
										<option value="${step.id}" >Step ${step.id}</option>
									</c:if>
								</c:forEach>
							</select>
							To step:
							<select class=" stepsSelect step_to" onchange="changeStep('to', 'compSim_mapping${mapping.id}')">
								<option value="-1">-- choose step --</option>
								<c:forEach var="step" items="${simulation.steps}">
									<c:if test="${mapping.toStep.id == step.id}">
										<option value="${step.id}" selected="selected" >Step ${step.id}</option>
									</c:if>
									<c:if test="${mapping.toStep.id != step.id}">
										<option value="${step.id}" >Step ${step.id}</option>
									</c:if>
								</c:forEach>
							</select>
				
			 				<button class="removeButton" onclick="removeItem(this)">remove</button>
							<ul><!--  -->
							<c:forEach items="${mapping.mapping}" var="item">
								<li>
									<span class="variable_from variable_from${item.key.id}" rel="${item.key.id}">${item.key.name}</span>
						        	&gt;
						    		<span class="variable_to variable_to${item.value.id}" rel="${item.value.id}">${item.value.name}</span>
						 			<button class="removeButton" onclick="removeItem(this)">remove</button>
								</li>
							</c:forEach> 
				
						</ul>
							Name from:
							<select class="variable_from">
								<option value="-1">-- Choose variable -- </option>
								<c:forEach items="${variables}" var="variable"> 
									<option value="${variable.id}">${variable.name}</option>
								</c:forEach>
							</select>
				
							Name to:
							<select class="variable_to">
								<option value="-1">-- Choose variable -- </option>
								<c:forEach items="${variables}" var="variable"> 
									<option value="${variable.id}">${variable.name}</option>
								</c:forEach>
							</select>
							<button onclick="addVariableMapping('compSim_mapping${mapping.id}')">Add variable mapping</button>
						</li>
					</c:forEach>
				</ul>
				<button onclick="addMapping()">Add mapping</button>
			</td>
		</tr>
	</table>
	
	
	
	<button onclick="createCompositeSimulation()">Update simulation</button>

	<spring:url var="removeButton" value="/resources/images/delete.png" />
	<style>
		#sortable { list-style-type: none; margin: 0; padding: 0; width: 60%; }
		ul li { margin: 0 5px 5px 5px; padding: 5px; font-size: 1.2em; border: 1px solid gray;}
		html>body #sortable li { height: 1.5em; line-height: 1.2em; }
		.ui-state-highlight { height: 1.5em; line-height: 1.2em; }
		#compositeSimulationItems li { margin: 0 5px 5px 0; padding: 5px; padding-top: 10px; font-size: 1.2em; border: 1px solid gray; list-style: none; padding-left: 34px; background-position: 5px 5px;}
		
		label {
			font-weight: bold;
			font-size: 1.3em;
			display: block;
			float: none;
		}
		textarea {
			width: 400px;
			height: 60px;
		}
		
		button.removeButton {
			background: url(${removeButton}) no-repeat left;
			padding-left: 20px;
		}
			
		/*
		.compSim_step { background: url(${stepIcon}) no-repeat; }
		.compSim_simulation { background: url(${simulationIcon}) no-repeat; }
		.compSim_mapping { background: url(${mappingIcon}) no-repeat; }
		*/
		
	</style>
	<script>
	    $(function() {
		    $( "#sortable" ).sortable({
			    placeholder: "ui-state-highlight"
		    });
		    $( "#sortable" ).disableSelection();
	    });
	</script>
</div>
